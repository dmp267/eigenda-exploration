{"abi":[{"type":"function","name":"addShares","inputs":[{"name":"podOwner","type":"address","internalType":"address"},{"name":"shares","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"beaconChainETHStrategy","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract IStrategy"}],"stateMutability":"view"},{"type":"function","name":"beaconChainOracle","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract IBeaconChainOracle"}],"stateMutability":"view"},{"type":"function","name":"createPod","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"nonpayable"},{"type":"function","name":"denebForkTimestamp","inputs":[],"outputs":[{"name":"","type":"uint64","internalType":"uint64"}],"stateMutability":"view"},{"type":"function","name":"eigenPodBeacon","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract IBeacon"}],"stateMutability":"view"},{"type":"function","name":"ethPOS","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract IETHPOSDeposit"}],"stateMutability":"view"},{"type":"function","name":"getBlockRootAtTimestamp","inputs":[{"name":"timestamp","type":"uint64","internalType":"uint64"}],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"getPod","inputs":[{"name":"podOwner","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"address","internalType":"contract IEigenPod"}],"stateMutability":"view"},{"type":"function","name":"hasPod","inputs":[{"name":"podOwner","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"numPods","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"ownerToPod","inputs":[{"name":"podOwner","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"address","internalType":"contract IEigenPod"}],"stateMutability":"view"},{"type":"function","name":"pause","inputs":[{"name":"newPausedStatus","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"pauseAll","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"paused","inputs":[{"name":"index","type":"uint8","internalType":"uint8"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"paused","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"pauserRegistry","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract IPauserRegistry"}],"stateMutability":"view"},{"type":"function","name":"podOwnerShares","inputs":[{"name":"podOwner","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"int256","internalType":"int256"}],"stateMutability":"view"},{"type":"function","name":"recordBeaconChainETHBalanceUpdate","inputs":[{"name":"podOwner","type":"address","internalType":"address"},{"name":"sharesDelta","type":"int256","internalType":"int256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"removeShares","inputs":[{"name":"podOwner","type":"address","internalType":"address"},{"name":"shares","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setDenebForkTimestamp","inputs":[{"name":"newDenebForkTimestamp","type":"uint64","internalType":"uint64"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setPauserRegistry","inputs":[{"name":"newPauserRegistry","type":"address","internalType":"contract IPauserRegistry"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"slasher","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract ISlasher"}],"stateMutability":"view"},{"type":"function","name":"stake","inputs":[{"name":"pubkey","type":"bytes","internalType":"bytes"},{"name":"signature","type":"bytes","internalType":"bytes"},{"name":"depositDataRoot","type":"bytes32","internalType":"bytes32"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"strategyManager","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract IStrategyManager"}],"stateMutability":"view"},{"type":"function","name":"unpause","inputs":[{"name":"newPausedStatus","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"updateBeaconChainOracle","inputs":[{"name":"newBeaconChainOracle","type":"address","internalType":"contract IBeaconChainOracle"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"withdrawSharesAsTokens","inputs":[{"name":"podOwner","type":"address","internalType":"address"},{"name":"destination","type":"address","internalType":"address"},{"name":"shares","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"event","name":"BeaconChainETHDeposited","inputs":[{"name":"podOwner","type":"address","indexed":true,"internalType":"address"},{"name":"amount","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"BeaconChainETHWithdrawalCompleted","inputs":[{"name":"podOwner","type":"address","indexed":true,"internalType":"address"},{"name":"shares","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"nonce","type":"uint96","indexed":false,"internalType":"uint96"},{"name":"delegatedAddress","type":"address","indexed":false,"internalType":"address"},{"name":"withdrawer","type":"address","indexed":false,"internalType":"address"},{"name":"withdrawalRoot","type":"bytes32","indexed":false,"internalType":"bytes32"}],"anonymous":false},{"type":"event","name":"BeaconOracleUpdated","inputs":[{"name":"newOracleAddress","type":"address","indexed":true,"internalType":"address"}],"anonymous":false},{"type":"event","name":"DenebForkTimestampUpdated","inputs":[{"name":"newValue","type":"uint64","indexed":false,"internalType":"uint64"}],"anonymous":false},{"type":"event","name":"Paused","inputs":[{"name":"account","type":"address","indexed":true,"internalType":"address"},{"name":"newPausedStatus","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"PauserRegistrySet","inputs":[{"name":"pauserRegistry","type":"address","indexed":false,"internalType":"contract IPauserRegistry"},{"name":"newPauserRegistry","type":"address","indexed":false,"internalType":"contract IPauserRegistry"}],"anonymous":false},{"type":"event","name":"PodDeployed","inputs":[{"name":"eigenPod","type":"address","indexed":true,"internalType":"address"},{"name":"podOwner","type":"address","indexed":true,"internalType":"address"}],"anonymous":false},{"type":"event","name":"PodSharesUpdated","inputs":[{"name":"podOwner","type":"address","indexed":true,"internalType":"address"},{"name":"sharesDelta","type":"int256","indexed":false,"internalType":"int256"}],"anonymous":false},{"type":"event","name":"Unpaused","inputs":[{"name":"account","type":"address","indexed":true,"internalType":"address"},{"name":"newPausedStatus","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"addShares(address,uint256)":"0e81073c","beaconChainETHStrategy()":"9104c319","beaconChainOracle()":"c052bd61","createPod()":"84d81062","denebForkTimestamp()":"44e71c80","eigenPodBeacon()":"292b7b2b","ethPOS()":"74cdd798","getBlockRootAtTimestamp(uint64)":"d1c64cc9","getPod(address)":"a38406a3","hasPod(address)":"f6848d24","numPods()":"a6a509be","ownerToPod(address)":"9ba06275","pause(uint256)":"136439dd","pauseAll()":"595c6a67","paused()":"5c975abb","paused(uint8)":"5ac86ab7","pauserRegistry()":"886f1195","podOwnerShares(address)":"60f4062b","recordBeaconChainETHBalanceUpdate(address,int256)":"c2c51c40","removeShares(address,uint256)":"beffbb89","setDenebForkTimestamp(uint64)":"463db038","setPauserRegistry(address)":"10d67a2f","slasher()":"b1344271","stake(bytes,bytes,bytes32)":"9b4e4634","strategyManager()":"39b70e38","unpause(uint256)":"fabc1cbc","updateBeaconChainOracle(address)":"c1de3aef","withdrawSharesAsTokens(address,address,uint256)":"387b1300"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"podOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BeaconChainETHDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"podOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"nonce\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"delegatedAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"withdrawalRoot\",\"type\":\"bytes32\"}],\"name\":\"BeaconChainETHWithdrawalCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOracleAddress\",\"type\":\"address\"}],\"name\":\"BeaconOracleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"newValue\",\"type\":\"uint64\"}],\"name\":\"DenebForkTimestampUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPausedStatus\",\"type\":\"uint256\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IPauserRegistry\",\"name\":\"pauserRegistry\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IPauserRegistry\",\"name\":\"newPauserRegistry\",\"type\":\"address\"}],\"name\":\"PauserRegistrySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"eigenPod\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"podOwner\",\"type\":\"address\"}],\"name\":\"PodDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"podOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"sharesDelta\",\"type\":\"int256\"}],\"name\":\"PodSharesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPausedStatus\",\"type\":\"uint256\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"podOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"addShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beaconChainETHStrategy\",\"outputs\":[{\"internalType\":\"contract IStrategy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beaconChainOracle\",\"outputs\":[{\"internalType\":\"contract IBeaconChainOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createPod\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"denebForkTimestamp\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eigenPodBeacon\",\"outputs\":[{\"internalType\":\"contract IBeacon\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethPOS\",\"outputs\":[{\"internalType\":\"contract IETHPOSDeposit\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"}],\"name\":\"getBlockRootAtTimestamp\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"podOwner\",\"type\":\"address\"}],\"name\":\"getPod\",\"outputs\":[{\"internalType\":\"contract IEigenPod\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"podOwner\",\"type\":\"address\"}],\"name\":\"hasPod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numPods\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"podOwner\",\"type\":\"address\"}],\"name\":\"ownerToPod\",\"outputs\":[{\"internalType\":\"contract IEigenPod\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPausedStatus\",\"type\":\"uint256\"}],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauserRegistry\",\"outputs\":[{\"internalType\":\"contract IPauserRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"podOwner\",\"type\":\"address\"}],\"name\":\"podOwnerShares\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"podOwner\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"sharesDelta\",\"type\":\"int256\"}],\"name\":\"recordBeaconChainETHBalanceUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"podOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"removeShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"newDenebForkTimestamp\",\"type\":\"uint64\"}],\"name\":\"setDenebForkTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPauserRegistry\",\"name\":\"newPauserRegistry\",\"type\":\"address\"}],\"name\":\"setPauserRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slasher\",\"outputs\":[{\"internalType\":\"contract ISlasher\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"depositDataRoot\",\"type\":\"bytes32\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategyManager\",\"outputs\":[{\"internalType\":\"contract IStrategyManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPausedStatus\",\"type\":\"uint256\"}],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBeaconChainOracle\",\"name\":\"newBeaconChainOracle\",\"type\":\"address\"}],\"name\":\"updateBeaconChainOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"podOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"withdrawSharesAsTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Layr Labs, Inc.\",\"kind\":\"dev\",\"methods\":{\"addShares(address,uint256)\":{\"details\":\"Returns the number of shares added to `podOwnerShares[podOwner]` above zero, which will be less than the `shares` input in the event that the podOwner has an existing shares deficit (i.e. `podOwnerShares[podOwner]` starts below zero)Reverts if `shares` is not a whole Gwei amount\"},\"createPod()\":{\"details\":\"Function will revert if the `msg.sender` already has an EigenPod.Returns EigenPod address \"},\"pause(uint256)\":{\"details\":\"This function can only pause functionality, and thus cannot 'unflip' any bit in `_paused` from 1 to 0.\",\"params\":{\"newPausedStatus\":\"represents the new value for `_paused` to take, which means it may flip several bits at once.\"}},\"podOwnerShares(address)\":{\"details\":\"The share amount can become negative. This is necessary to accommodate the fact that a pod owner's virtual beacon chain ETH shares can decrease between the pod owner queuing and completing a withdrawal. When the pod owner's shares would otherwise increase, this \\\"deficit\\\" is decreased first _instead_. Likewise, when a withdrawal is completed, this \\\"deficit\\\" is decreased and the withdrawal amount is decreased; We can think of this as the withdrawal \\\"paying off the deficit\\\".\"},\"recordBeaconChainETHBalanceUpdate(address,int256)\":{\"details\":\"Callable only by the podOwner's EigenPod contract.Reverts if `sharesDelta` is not a whole Gwei amount\",\"params\":{\"podOwner\":\"is the pod owner whose balance is being updated.\",\"sharesDelta\":\"is the change in podOwner's beaconChainETHStrategy shares\"}},\"removeShares(address,uint256)\":{\"details\":\"This function reverts if it would result in `podOwnerShares[podOwner]` being less than zero, i.e. it is forbidden for this function to result in the `podOwner` incurring a \\\"share deficit\\\". This behavior prevents a Staker from queuing a withdrawal which improperly removes excessive shares from the operator to whom the staker is delegated.Reverts if `shares` is not a whole Gwei amount\"},\"setDenebForkTimestamp(uint64)\":{\"details\":\"this function is designed to be called twice.  Once, it is set to type(uint64).max  prior to the actual deneb fork timestamp being set, and then the second time it is set  to the actual deneb fork timestamp.\"},\"stake(bytes,bytes,bytes32)\":{\"params\":{\"depositDataRoot\":\"The root/hash of the deposit data for the validator's deposit.\",\"pubkey\":\"The 48 bytes public key of the beacon chain validator.\",\"signature\":\"The validator's signature of the deposit data.\"}},\"unpause(uint256)\":{\"details\":\"This function can only unpause functionality, and thus cannot 'flip' any bit in `_paused` from 0 to 1.\",\"params\":{\"newPausedStatus\":\"represents the new value for `_paused` to take, which means it may flip several bits at once.\"}},\"updateBeaconChainOracle(address)\":{\"details\":\"Callable only by the owner of this contract (i.e. governance)\",\"params\":{\"newBeaconChainOracle\":\"is the new oracle contract being pointed to\"}},\"withdrawSharesAsTokens(address,address,uint256)\":{\"details\":\"Prioritizes decreasing the podOwner's share deficit, if they have oneReverts if `shares` is not a whole Gwei amount\"}},\"title\":\"Interface for factory that creates and manages solo staking pods that have their withdrawal credentials pointed to EigenLayer.\",\"version\":1},\"userdoc\":{\"events\":{\"BeaconChainETHDeposited(address,uint256)\":{\"notice\":\"Emitted to notify a deposit of beacon chain ETH recorded in the strategy manager\"},\"BeaconChainETHWithdrawalCompleted(address,uint256,uint96,address,address,bytes32)\":{\"notice\":\"Emitted when a withdrawal of beacon chain ETH is completed\"},\"BeaconOracleUpdated(address)\":{\"notice\":\"Emitted to notify the update of the beaconChainOracle address\"},\"Paused(address,uint256)\":{\"notice\":\"Emitted when the pause is triggered by `account`, and changed to `newPausedStatus`.\"},\"PauserRegistrySet(address,address)\":{\"notice\":\"Emitted when the `pauserRegistry` is set to `newPauserRegistry`.\"},\"PodDeployed(address,address)\":{\"notice\":\"Emitted to notify the deployment of an EigenPod\"},\"PodSharesUpdated(address,int256)\":{\"notice\":\"Emitted when the balance of an EigenPod is updated\"},\"Unpaused(address,uint256)\":{\"notice\":\"Emitted when the pause is lifted by `account`, and changed to `newPausedStatus`.\"}},\"kind\":\"user\",\"methods\":{\"addShares(address,uint256)\":{\"notice\":\"Increases the `podOwner`'s shares by `shares`, paying off deficit if possible. Used by the DelegationManager to award a pod owner shares on exiting the withdrawal queue\"},\"beaconChainETHStrategy()\":{\"notice\":\"returns canonical, virtual beaconChainETH strategy\"},\"beaconChainOracle()\":{\"notice\":\"Oracle contract that provides updates to the beacon chain's state\"},\"createPod()\":{\"notice\":\"Creates an EigenPod for the sender.\"},\"denebForkTimestamp()\":{\"notice\":\"the deneb hard fork timestamp used to determine which proof path to use for proving a withdrawal\"},\"eigenPodBeacon()\":{\"notice\":\"Beacon proxy to which the EigenPods point\"},\"ethPOS()\":{\"notice\":\"The ETH2 Deposit Contract\"},\"getBlockRootAtTimestamp(uint64)\":{\"notice\":\"Returns the beacon block root at `timestamp`. Reverts if the Beacon block root at `timestamp` has not yet been finalized.\"},\"getPod(address)\":{\"notice\":\"Returns the address of the `podOwner`'s EigenPod (whether it is deployed yet or not).\"},\"hasPod(address)\":{\"notice\":\"Returns 'true' if the `podOwner` has created an EigenPod, and 'false' otherwise.\"},\"numPods()\":{\"notice\":\"Returns the number of EigenPods that have been created\"},\"ownerToPod(address)\":{\"notice\":\"Returns the address of the `podOwner`'s EigenPod if it has been deployed.\"},\"pause(uint256)\":{\"notice\":\"This function is used to pause an EigenLayer contract's functionality. It is permissioned to the `pauser` address, which is expected to be a low threshold multisig.\"},\"pauseAll()\":{\"notice\":\"Alias for `pause(type(uint256).max)`.\"},\"paused()\":{\"notice\":\"Returns the current paused status as a uint256.\"},\"paused(uint8)\":{\"notice\":\"Returns 'true' if the `indexed`th bit of `_paused` is 1, and 'false' otherwise\"},\"pauserRegistry()\":{\"notice\":\"Address of the `PauserRegistry` contract that this contract defers to for determining access control (for pausing).\"},\"podOwnerShares(address)\":{\"notice\":\"Mapping from Pod owner owner to the number of shares they have in the virtual beacon chain ETH strategy.\"},\"recordBeaconChainETHBalanceUpdate(address,int256)\":{\"notice\":\"Changes the `podOwner`'s shares by `sharesDelta` and performs a call to the DelegationManager to ensure that delegated shares are also tracked correctly\"},\"removeShares(address,uint256)\":{\"notice\":\"Used by the DelegationManager to remove a pod owner's shares while they're in the withdrawal queue. Simply decreases the `podOwner`'s shares by `shares`, down to a minimum of zero.\"},\"setDenebForkTimestamp(uint64)\":{\"notice\":\"setting the deneb hard fork timestamp by the eigenPodManager owner\"},\"setPauserRegistry(address)\":{\"notice\":\"Allows the unpauser to set a new pauser registry\"},\"slasher()\":{\"notice\":\"EigenLayer's Slasher contract\"},\"stake(bytes,bytes,bytes32)\":{\"notice\":\"Stakes for a new beacon chain validator on the sender's EigenPod. Also creates an EigenPod for the sender if they don't have one already.\"},\"strategyManager()\":{\"notice\":\"EigenLayer's StrategyManager contract\"},\"unpause(uint256)\":{\"notice\":\"This function is used to unpause an EigenLayer contract's functionality. It is permissioned to the `unpauser` address, which is expected to be a high threshold multisig or governance contract.\"},\"updateBeaconChainOracle(address)\":{\"notice\":\"Updates the oracle contract that provides the beacon chain state root\"},\"withdrawSharesAsTokens(address,address,uint256)\":{\"notice\":\"Used by the DelegationManager to complete a withdrawal, sending tokens to some destination address\"}},\"notice\":\"Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/CarbonMonitoringVerifier_flat.sol\":\"IEigenPodManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin-upgrades/=lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable/\",\":@openzeppelin/=lib/eigenlayer-contracts/lib/openzeppelin-contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":chainlink/=lib/chainlink/\",\":ds-test/=lib/eigenlayer-contracts/lib/ds-test/src/\",\":eigenda/=lib/eigenda/contracts/\",\":eigenlayer-contracts/=lib/eigenlayer-contracts/\",\":eigenlayer-middleware/=lib/eigenlayer-middleware/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable/=lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"src/contracts/CarbonMonitoringVerifier_flat.sol\":{\"keccak256\":\"0x72ce44d756ce401111b882cddd814c55fbdf4c795bd6c700fa8b998a2d8269be\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://804c283836cdeca0640eb0b2f11a2180d2a4abda78f1239355fb800190214404\",\"dweb:/ipfs/QmSMajejLgVwGJLBRzXJYS7VHCvf7JPYkk52rq7oPC42rP\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.25+commit.b61c2a91"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"podOwner","type":"address","indexed":true},{"internalType":"uint256","name":"amount","type":"uint256","indexed":false}],"type":"event","name":"BeaconChainETHDeposited","anonymous":false},{"inputs":[{"internalType":"address","name":"podOwner","type":"address","indexed":true},{"internalType":"uint256","name":"shares","type":"uint256","indexed":false},{"internalType":"uint96","name":"nonce","type":"uint96","indexed":false},{"internalType":"address","name":"delegatedAddress","type":"address","indexed":false},{"internalType":"address","name":"withdrawer","type":"address","indexed":false},{"internalType":"bytes32","name":"withdrawalRoot","type":"bytes32","indexed":false}],"type":"event","name":"BeaconChainETHWithdrawalCompleted","anonymous":false},{"inputs":[{"internalType":"address","name":"newOracleAddress","type":"address","indexed":true}],"type":"event","name":"BeaconOracleUpdated","anonymous":false},{"inputs":[{"internalType":"uint64","name":"newValue","type":"uint64","indexed":false}],"type":"event","name":"DenebForkTimestampUpdated","anonymous":false},{"inputs":[{"internalType":"address","name":"account","type":"address","indexed":true},{"internalType":"uint256","name":"newPausedStatus","type":"uint256","indexed":false}],"type":"event","name":"Paused","anonymous":false},{"inputs":[{"internalType":"contract IPauserRegistry","name":"pauserRegistry","type":"address","indexed":false},{"internalType":"contract IPauserRegistry","name":"newPauserRegistry","type":"address","indexed":false}],"type":"event","name":"PauserRegistrySet","anonymous":false},{"inputs":[{"internalType":"address","name":"eigenPod","type":"address","indexed":true},{"internalType":"address","name":"podOwner","type":"address","indexed":true}],"type":"event","name":"PodDeployed","anonymous":false},{"inputs":[{"internalType":"address","name":"podOwner","type":"address","indexed":true},{"internalType":"int256","name":"sharesDelta","type":"int256","indexed":false}],"type":"event","name":"PodSharesUpdated","anonymous":false},{"inputs":[{"internalType":"address","name":"account","type":"address","indexed":true},{"internalType":"uint256","name":"newPausedStatus","type":"uint256","indexed":false}],"type":"event","name":"Unpaused","anonymous":false},{"inputs":[{"internalType":"address","name":"podOwner","type":"address"},{"internalType":"uint256","name":"shares","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"addShares","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"beaconChainETHStrategy","outputs":[{"internalType":"contract IStrategy","name":"","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"beaconChainOracle","outputs":[{"internalType":"contract IBeaconChainOracle","name":"","type":"address"}]},{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"createPod","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"denebForkTimestamp","outputs":[{"internalType":"uint64","name":"","type":"uint64"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"eigenPodBeacon","outputs":[{"internalType":"contract IBeacon","name":"","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"ethPOS","outputs":[{"internalType":"contract IETHPOSDeposit","name":"","type":"address"}]},{"inputs":[{"internalType":"uint64","name":"timestamp","type":"uint64"}],"stateMutability":"view","type":"function","name":"getBlockRootAtTimestamp","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}]},{"inputs":[{"internalType":"address","name":"podOwner","type":"address"}],"stateMutability":"view","type":"function","name":"getPod","outputs":[{"internalType":"contract IEigenPod","name":"","type":"address"}]},{"inputs":[{"internalType":"address","name":"podOwner","type":"address"}],"stateMutability":"view","type":"function","name":"hasPod","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"numPods","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"podOwner","type":"address"}],"stateMutability":"view","type":"function","name":"ownerToPod","outputs":[{"internalType":"contract IEigenPod","name":"","type":"address"}]},{"inputs":[{"internalType":"uint256","name":"newPausedStatus","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"pause"},{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"pauseAll"},{"inputs":[{"internalType":"uint8","name":"index","type":"uint8"}],"stateMutability":"view","type":"function","name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"paused","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"pauserRegistry","outputs":[{"internalType":"contract IPauserRegistry","name":"","type":"address"}]},{"inputs":[{"internalType":"address","name":"podOwner","type":"address"}],"stateMutability":"view","type":"function","name":"podOwnerShares","outputs":[{"internalType":"int256","name":"","type":"int256"}]},{"inputs":[{"internalType":"address","name":"podOwner","type":"address"},{"internalType":"int256","name":"sharesDelta","type":"int256"}],"stateMutability":"nonpayable","type":"function","name":"recordBeaconChainETHBalanceUpdate"},{"inputs":[{"internalType":"address","name":"podOwner","type":"address"},{"internalType":"uint256","name":"shares","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"removeShares"},{"inputs":[{"internalType":"uint64","name":"newDenebForkTimestamp","type":"uint64"}],"stateMutability":"nonpayable","type":"function","name":"setDenebForkTimestamp"},{"inputs":[{"internalType":"contract IPauserRegistry","name":"newPauserRegistry","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"setPauserRegistry"},{"inputs":[],"stateMutability":"view","type":"function","name":"slasher","outputs":[{"internalType":"contract ISlasher","name":"","type":"address"}]},{"inputs":[{"internalType":"bytes","name":"pubkey","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"},{"internalType":"bytes32","name":"depositDataRoot","type":"bytes32"}],"stateMutability":"payable","type":"function","name":"stake"},{"inputs":[],"stateMutability":"view","type":"function","name":"strategyManager","outputs":[{"internalType":"contract IStrategyManager","name":"","type":"address"}]},{"inputs":[{"internalType":"uint256","name":"newPausedStatus","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"unpause"},{"inputs":[{"internalType":"contract IBeaconChainOracle","name":"newBeaconChainOracle","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"updateBeaconChainOracle"},{"inputs":[{"internalType":"address","name":"podOwner","type":"address"},{"internalType":"address","name":"destination","type":"address"},{"internalType":"uint256","name":"shares","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"withdrawSharesAsTokens"}],"devdoc":{"kind":"dev","methods":{"addShares(address,uint256)":{"details":"Returns the number of shares added to `podOwnerShares[podOwner]` above zero, which will be less than the `shares` input in the event that the podOwner has an existing shares deficit (i.e. `podOwnerShares[podOwner]` starts below zero)Reverts if `shares` is not a whole Gwei amount"},"createPod()":{"details":"Function will revert if the `msg.sender` already has an EigenPod.Returns EigenPod address "},"pause(uint256)":{"details":"This function can only pause functionality, and thus cannot 'unflip' any bit in `_paused` from 1 to 0.","params":{"newPausedStatus":"represents the new value for `_paused` to take, which means it may flip several bits at once."}},"podOwnerShares(address)":{"details":"The share amount can become negative. This is necessary to accommodate the fact that a pod owner's virtual beacon chain ETH shares can decrease between the pod owner queuing and completing a withdrawal. When the pod owner's shares would otherwise increase, this \"deficit\" is decreased first _instead_. Likewise, when a withdrawal is completed, this \"deficit\" is decreased and the withdrawal amount is decreased; We can think of this as the withdrawal \"paying off the deficit\"."},"recordBeaconChainETHBalanceUpdate(address,int256)":{"details":"Callable only by the podOwner's EigenPod contract.Reverts if `sharesDelta` is not a whole Gwei amount","params":{"podOwner":"is the pod owner whose balance is being updated.","sharesDelta":"is the change in podOwner's beaconChainETHStrategy shares"}},"removeShares(address,uint256)":{"details":"This function reverts if it would result in `podOwnerShares[podOwner]` being less than zero, i.e. it is forbidden for this function to result in the `podOwner` incurring a \"share deficit\". This behavior prevents a Staker from queuing a withdrawal which improperly removes excessive shares from the operator to whom the staker is delegated.Reverts if `shares` is not a whole Gwei amount"},"setDenebForkTimestamp(uint64)":{"details":"this function is designed to be called twice.  Once, it is set to type(uint64).max  prior to the actual deneb fork timestamp being set, and then the second time it is set  to the actual deneb fork timestamp."},"stake(bytes,bytes,bytes32)":{"params":{"depositDataRoot":"The root/hash of the deposit data for the validator's deposit.","pubkey":"The 48 bytes public key of the beacon chain validator.","signature":"The validator's signature of the deposit data."}},"unpause(uint256)":{"details":"This function can only unpause functionality, and thus cannot 'flip' any bit in `_paused` from 0 to 1.","params":{"newPausedStatus":"represents the new value for `_paused` to take, which means it may flip several bits at once."}},"updateBeaconChainOracle(address)":{"details":"Callable only by the owner of this contract (i.e. governance)","params":{"newBeaconChainOracle":"is the new oracle contract being pointed to"}},"withdrawSharesAsTokens(address,address,uint256)":{"details":"Prioritizes decreasing the podOwner's share deficit, if they have oneReverts if `shares` is not a whole Gwei amount"}},"version":1},"userdoc":{"kind":"user","methods":{"addShares(address,uint256)":{"notice":"Increases the `podOwner`'s shares by `shares`, paying off deficit if possible. Used by the DelegationManager to award a pod owner shares on exiting the withdrawal queue"},"beaconChainETHStrategy()":{"notice":"returns canonical, virtual beaconChainETH strategy"},"beaconChainOracle()":{"notice":"Oracle contract that provides updates to the beacon chain's state"},"createPod()":{"notice":"Creates an EigenPod for the sender."},"denebForkTimestamp()":{"notice":"the deneb hard fork timestamp used to determine which proof path to use for proving a withdrawal"},"eigenPodBeacon()":{"notice":"Beacon proxy to which the EigenPods point"},"ethPOS()":{"notice":"The ETH2 Deposit Contract"},"getBlockRootAtTimestamp(uint64)":{"notice":"Returns the beacon block root at `timestamp`. Reverts if the Beacon block root at `timestamp` has not yet been finalized."},"getPod(address)":{"notice":"Returns the address of the `podOwner`'s EigenPod (whether it is deployed yet or not)."},"hasPod(address)":{"notice":"Returns 'true' if the `podOwner` has created an EigenPod, and 'false' otherwise."},"numPods()":{"notice":"Returns the number of EigenPods that have been created"},"ownerToPod(address)":{"notice":"Returns the address of the `podOwner`'s EigenPod if it has been deployed."},"pause(uint256)":{"notice":"This function is used to pause an EigenLayer contract's functionality. It is permissioned to the `pauser` address, which is expected to be a low threshold multisig."},"pauseAll()":{"notice":"Alias for `pause(type(uint256).max)`."},"paused()":{"notice":"Returns the current paused status as a uint256."},"paused(uint8)":{"notice":"Returns 'true' if the `indexed`th bit of `_paused` is 1, and 'false' otherwise"},"pauserRegistry()":{"notice":"Address of the `PauserRegistry` contract that this contract defers to for determining access control (for pausing)."},"podOwnerShares(address)":{"notice":"Mapping from Pod owner owner to the number of shares they have in the virtual beacon chain ETH strategy."},"recordBeaconChainETHBalanceUpdate(address,int256)":{"notice":"Changes the `podOwner`'s shares by `sharesDelta` and performs a call to the DelegationManager to ensure that delegated shares are also tracked correctly"},"removeShares(address,uint256)":{"notice":"Used by the DelegationManager to remove a pod owner's shares while they're in the withdrawal queue. Simply decreases the `podOwner`'s shares by `shares`, down to a minimum of zero."},"setDenebForkTimestamp(uint64)":{"notice":"setting the deneb hard fork timestamp by the eigenPodManager owner"},"setPauserRegistry(address)":{"notice":"Allows the unpauser to set a new pauser registry"},"slasher()":{"notice":"EigenLayer's Slasher contract"},"stake(bytes,bytes,bytes32)":{"notice":"Stakes for a new beacon chain validator on the sender's EigenPod. Also creates an EigenPod for the sender if they don't have one already."},"strategyManager()":{"notice":"EigenLayer's StrategyManager contract"},"unpause(uint256)":{"notice":"This function is used to unpause an EigenLayer contract's functionality. It is permissioned to the `unpauser` address, which is expected to be a high threshold multisig or governance contract."},"updateBeaconChainOracle(address)":{"notice":"Updates the oracle contract that provides the beacon chain state root"},"withdrawSharesAsTokens(address,address,uint256)":{"notice":"Used by the DelegationManager to complete a withdrawal, sending tokens to some destination address"}},"version":1}},"settings":{"remappings":["@openzeppelin-upgrades/=lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable/","@openzeppelin/=lib/eigenlayer-contracts/lib/openzeppelin-contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","chainlink/=lib/chainlink/","ds-test/=lib/eigenlayer-contracts/lib/ds-test/src/","eigenda/=lib/eigenda/contracts/","eigenlayer-contracts/=lib/eigenlayer-contracts/","eigenlayer-middleware/=lib/eigenlayer-middleware/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","openzeppelin-contracts-upgradeable/=lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/contracts/CarbonMonitoringVerifier_flat.sol":"IEigenPodManager"},"evmVersion":"paris","libraries":{}},"sources":{"src/contracts/CarbonMonitoringVerifier_flat.sol":{"keccak256":"0x72ce44d756ce401111b882cddd814c55fbdf4c795bd6c700fa8b998a2d8269be","urls":["bzz-raw://804c283836cdeca0640eb0b2f11a2180d2a4abda78f1239355fb800190214404","dweb:/ipfs/QmSMajejLgVwGJLBRzXJYS7VHCvf7JPYkk52rq7oPC42rP"],"license":"MIT"}},"version":1},"id":72}